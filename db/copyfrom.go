// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBulkCreatePowerConsumpion implements pgx.CopyFromSource.
type iteratorForBulkCreatePowerConsumpion struct {
	rows                 []BulkCreatePowerConsumpionParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreatePowerConsumpion) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreatePowerConsumpion) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].HomeID,
		r.rows[0].Power,
		r.rows[0].MinPower,
		r.rows[0].MaxPower,
		r.rows[0].AvgPower,
		r.rows[0].LastMeterConsumption,
		r.rows[0].LastMeterProduction,
		r.rows[0].AccumulatedConsumptionToday,
		r.rows[0].AccumulatedProductionToday,
		r.rows[0].AccumulatedConsumptionHour,
		r.rows[0].AccumulatedProductionHour,
		r.rows[0].CurrentPriceFromProvider,
		r.rows[0].AccumulatedCostToday,
		r.rows[0].Ts,
	}, nil
}

func (r iteratorForBulkCreatePowerConsumpion) Err() error {
	return nil
}

func (q *Queries) BulkCreatePowerConsumpion(ctx context.Context, arg []BulkCreatePowerConsumpionParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"power_consumption"}, []string{"home_id", "power", "min_power", "max_power", "avg_power", "last_meter_consumption", "last_meter_production", "accumulated_consumption_today", "accumulated_production_today", "accumulated_consumption_hour", "accumulated_production_hour", "current_price_from_provider", "accumulated_cost_today", "ts"}, &iteratorForBulkCreatePowerConsumpion{rows: arg})
}
